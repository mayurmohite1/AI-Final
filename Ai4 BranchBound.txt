def solveNQueens(n):
    def count_attacks(board, row, col):
        attacks = 0
        # Check same row
        for i in range(n):
            if board[row][i] == 'Q':
                attacks += 1
        # Check same column
        for i in range(n):
            if board[i][col] == 'Q':
                attacks += 1
        # Check upper left diagonal
        for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
            if board[i][j] == 'Q':
                attacks += 1
        # Check lower left diagonal
        for i, j in zip(range(row, n), range(col, -1, -1)):
            if board[i][j] == 'Q':
                attacks += 1
        return attacks

    def branch_and_bound(board, col):
        if col >= n:
            solutions.append([''.join(row) for row in board])
            return
        # Keep track of potential conflicts for each row
        row_attacks = [count_attacks(board, i, col) for i in range(n)]
        # Prioritize rows with fewer potential conflicts
        for row, attacks in sorted(enumerate(row_attacks), key=lambda x: x[1]):
            if attacks == 0:
                board[row][col] = 'Q'
                branch_and_bound(board.copy(), col + 1)  # Use copy to avoid modifying original board
                board[row][col] = '.'
        return
    solutions = []
    board = [['.' for _ in range(n)] for _ in range(n)]
    branch_and_bound(board, 0)
    return solutions
def printSolutions(boards):
    for board in enumerate(boards):
        print(f"Solution {board[0] + 1}")
        for row in board[1]:
            for col in row:
                print(col, end=' ')
            print()
        print()
if __name__ == "__main__":
    N = 4  # Change N to the desired board size
    solutions = solveNQueens(N)
    printSolutions(solutions)
