class Node:
    def __init__(self, data, level, fval):
        """ Initialize the node with the data, level of the node, and the calculated fvalue """
        self.data = data
        self.level = level
        self.fval = fval

    def generate_child(self):
        """ Generate child nodes from the given node by moving the blank space either in the four directions {up,down,left,right} """
        x, y = self.find(self.data, '_')
        val_list = [[x, y-1], [x, y+1], [x-1, y], [x+1, y]]
        children = []
        for i in val_list:
            child = self.shuffle(self.data, x, y, i[0], i[1])
            if child is not None:
                child_node = Node(child, self.level+1, 0)
                children.append(child_node)
        return children

    def shuffle(self, puz, x1, y1, x2, y2):
        """ Move the blank space in the given direction and if the position value are out of limits then return None """
        if 0 <= x2 < len(self.data) and 0 <= y2 < len(self.data):
            temp_puz = self.copy(puz)
            temp = temp_puz[x2][y2]
            temp_puz[x2][y2] = temp_puz[x1][y1]
            temp_puz[x1][y1] = temp
            return temp_puz
        else:
            return None

    def copy(self, root):
        """ Copy function to create a similar matrix of the given node """
        temp = []
        for i in root:
            t = []
            for j in i:
                t.append(j)
            temp.append(t)
        return temp

    def find(self, puz, x):
        """ Specifically used to find the position of the _ """
        for i in range(len(self.data)):
            for j in range(len(self.data)):
                if puz[i][j] == x:
                    return i, j


class Puzzle:
    def __init__(self, size, max_iterations=10000):
        """ Initialize the puzzle size by the specified size, open and closed lists to empty """
        self.n = size
        self.open = []
        self.closed = []
        self.max_iterations = max_iterations
        self.iterations = 0

    def accept(self):
        """ Accepts the puzzle from the user """
        puz = []
        for _ in range(self.n):
            temp = input().split(" ")
            puz.append(temp)
        return puz

    def f(self, start, goal):
        """ Heuristic Function to calculate the sum of the number of misplaced tiles and depth of the puzzle (the level or number of iterations or g(x)) """
        return self.h(start.data, goal) + start.level

    def h(self, start, goal):
        """ Number of misplaced tiles(temp) which is h(x) """
        temp = 0
        for i in range(self.n):
            for j in range(self.n):
                if start[i][j] != goal[i][j] and start[i][j] != '_':
                    temp += 1
        return temp

    def process(self):
        print("Enter the start state matrix:")
        start = self.accept()
        print("Enter the goal state matrix:")
        goal = self.accept()
        start = Node(start, 0, 0)
        start.fval = self.f(start, goal)
        self.open.append(start)

        while self.open and self.iterations < self.max_iterations:
            self.iterations += 1
            cur = self.open[0]
            print("\n")
            print(" | ")
            print(" | ")
            print("\\'/ \n")
            for i in cur.data:
                print(" ".join(i))
                print()
            if self.h(cur.data, goal) == 0:
                break
            self.closed.append(cur)
            del self.open[0]
            for i in cur.generate_child():
                if i not in self.closed:
                    i.fval = self.f(i, goal)
                    self.open.append(i)
            self.open.sort(key=lambda x: x.fval, reverse=False)

        if not self.open:
            print("No solution found.")
        elif self.iterations >= self.max_iterations:
            print("Maximum iteration limit reached.")


puz = Puzzle(3)
puz.process()